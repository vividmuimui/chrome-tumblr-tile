// Generated by CoffeeScript 1.3.3
var NewTile;

NewTile = (function() {

  function NewTile() {
    this.configNs = "tumblr-tile";
    this.target_dom = $("#container");
  }

  NewTile.prototype.saveConfig = function(hash) {
    return localStorage[this.configNs] = JSON.stringify(hash);
  };

  NewTile.prototype.loadConfig = function() {
    var config, defaultConfig, strage;
    defaultConfig = {
      hostname: "aoi-miyazaki.tumblr.com",
      baseWidth: 250,
      margin: 10,
      limit: 20
    };
    strage = localStorage[this.configNs];
    config = strage ? JSON.parse(strage) : {};
    this.config = $.extend(defaultConfig, config);
    return console.log(this.config);
  };

  NewTile.prototype.getPostCount = function() {
    var _this = this;
    return this.getJson("/info", {}, function(json) {
      return _this.postsConut = json.response.blog.posts;
    });
  };

  NewTile.prototype.getPosts = function() {
    var param,
      _this = this;
    param = {
      offset: Math.max(Math.floor(Math.random() * this.postsConut - this.config.limit), 0),
      limit: this.config.limit
    };
    console.log({
      offset: param.offset,
      limit: param.limit,
      postCount: this.postsConut
    });
    return this.getJson("/posts/photo", param, function(json) {
      return _this.posts = json.response.posts;
    });
  };

  NewTile.prototype.draw = function() {
    var post, view, _i, _len, _ref;
    _ref = _.shuffle(this.posts);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      post = _ref[_i];
      view = this.view(post);
      this.target_dom.append(view);
    }
    return this.target_dom.masonry({
      itemSelector: ".item",
      columnWidth: this.config.baseWidth + this.config.margin,
      isFitWidth: true,
      isAnimated: true
    });
  };

  NewTile.prototype.add_scroll_event = function() {
    var isAccessTumblr,
      _this = this;
    isAccessTumblr = false;
    return $(window).scroll(function() {
      var documentheight, scrollTop, windowheight;
      scrollTop = $(window).scrollTop();
      windowheight = $(window).height();
      documentheight = $(document).height();
      if (isAccessTumblr === false && (documentheight - scrollTop) <= windowheight * 1.5) {
        isAccessTumblr = true;
        return _this.getPosts().then(function() {
          var post, posts, _i, _j, _len, _len1, _ref;
          posts = "";
          _ref = _this.posts;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            post = _ref[_i];
            posts += _this.view(post);
          }
          posts = $(posts);
          for (_j = 0, _len1 = posts.length; _j < _len1; _j++) {
            post = posts[_j];
            $(post).css({
              'margin': _this.config.margin / 2,
              'width': _this.config.baseWidth
            });
          }
          return _this.target_dom.append(posts).masonry('appended', posts, false);
        }).then(function() {
          return isAccessTumblr = false;
        });
      }
    });
  };

  NewTile.prototype.view = function(post) {
    var alt_size, height, width;
    alt_size = post.photos[0].alt_sizes[0];
    width = this.config.baseWidth;
    height = alt_size.height * (this.config.baseWidth / alt_size.width);
    return '<div class="item">' + '<a href="' + post.post_url + '">' + '<img src="' + alt_size.url + '" width="' + width + '" height="' + height + '" title="' + post.tags + '" />' + '</a>' + ("<div><a href='" + post.link_url + "'</a><font size='2'>" + post.tags + "</font></div>") + '</div>';
  };

  NewTile.prototype.getJson = function(url, param, func) {
    var d, p;
    d = new $.Deferred;
    p = $.extend({
      api_key: this.config.apiKey
    }, param);
    $.getJSON(this.baseUrl() + url, p, function(json) {
      func(json);
      return d.resolve();
    });
    return d;
  };

  NewTile.prototype.baseUrl = function() {
    return "https://api.tumblr.com/v2/blog/" + this.config.hostname;
  };

  return NewTile;

})();
